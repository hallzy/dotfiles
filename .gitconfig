[user]
  name = "Steven Hall"
  email = Hallzy.18@gmail.com
[core]
  editor = vim
  # Whitespace is used with "diff --check"
  whitespace = blank-at-eol,space-before-tab,blank-at-eof
  # Raise error for tabs in indent
  # whitespace = blank-at-eol,space-before-tab,tab-in-indent,blank-at-eof
  # Raise error for space in indent
  # whitespace = blank-at-eol,space-before-tab,indent-with-non-tab,blank-at-eof
[diff]
  tool = vimdiff
[merge]
  tool = vimdiff
  conflictstyle = diff3
[difftool]
  prompt = false
[mergetool]
  prompt = false
  keepBackup = false
[push]
  default = simple
[rebase]
  autosquash = true
[alias]
  b = branch
  co = checkout
  # Checkout new branch and setup git-radar to compare the new branch with the
  # previous branch's upstream
  cob = "!f() { \
      currentTracking=\"$(git for-each-ref --format='%(upstream:short)' \"$(git symbolic-ref -q HEAD)\")\"; \
      if [ -z \"$currentTracking\" ]; then \
        echo \"Could not determine tracking info for current branch.\"; \
        return; \
      fi; \
      git checkout -b \"$1\"; \
      git config --local branch.\"$(git rev-parse --abbrev-ref HEAD)\".git-radar-tracked-remote \"$currentTracking\"; \
    }; \
    f"
  ssh = "!git_to_ssh.sh"
  open = "!git_open.sh"
  p = stash pop
  br = branch
  ci = !git diff --check --cached && git diff --check && git commit -v
  st = status
  s = status -sb
  d = diff --word-diff
  dc = diff --word-diff --cached
  unstage = reset HEAD --
  graphlog = log --decorate --graph
  graphlogall = log --decorate --graph --all
  l = log --show-signature
  discard = checkout --
  amend = commit -v -S --amend
  r = rebase
  ri = rebase -i
  rix = rebase -ix
  rx = rebase -ix
  better-blame = log -p -M --follow --stat --

  cleaner = clean -i

  enforce-gitignore = !git rm -rf --cached . &&  git add .

  # before I add any files to the staging area, check to make sure whitespace is
  # all good, and no conflict markers are present.
  a = !git diff --check && git add

  update-master-from-upstream = "!f() { \
      git stash -u; \
      default=\"master-upstream\" \
      master_up=${1:-$default}; \
      current_branch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD); \
      git checkout ${master_up}; \
      git pull; \
      git checkout master; \
      git rebase ${master_up}; \
      git push; \
      git checkout ${current_branch}; \
      git stash pop; \
    }; \
    f"

  ; Stash my changes so far, then keep track of what branch I am on so that I
  ; can go back to it when this is done. We then need to find all the branches
  ; that are available and then checkout them and pull. Once done, go back to
  ; the original branch and pop the stash
  pull-all-branches = "!f() { \
      git stash -u; \
      current_branch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD); \
      git branch | grep -o \"[^[:space:]]\\+$\" | \
          xargs -I {} bash -c \"git checkout {} && git pull\"; \
      git checkout ${current_branch}; \
      git stash pop; \
    }; \
    f"

  # Show log as oneliner
  ls = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate --date=short
  lsgraphall = !git ls --decorate --graph --all

  # Same as ls but the lines after the commit show the files that are changed
  # and how many additions and deletions there were
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate --numstat
  llgraphall = !git ll --decorate --graph --all

  # Reflog the way I like to see it
  rl = reflog --format='%C(yellow)%h %<|(17)%gd %C(green)%ci%C(reset) %s'

  # Prints out all my git aliases
  la = "!git config -l | grep alias | cut -c 7-"

  # Shows the log of only the commits affected by the last command in ll or ls format
  # eg, executing after a git pull will show you the commits that were pulled
  newll = !sh -c 'git ll $1@{1}..$1@{0} "$@"'
  newls = !sh -c 'git ls $1@{1}..$1@{0} "$@"'
  newlog = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  new = !git newls

  fl = log -u

  find = "!git ls-files | grep -i"

  newdifftool = !git difftool $1@{1}..$1@{0}

  # Removes a file from version control, but does not remove the file itself
  # eg. git rmvc file
  rmvc = rm --cached

  # Used when you want to remove all the uncommitted changes I have made. It
  # commits all these changes, and resets the working directory as if it was all
  # deleted. This means if need be, I can get that commit back with reflog
  # eg. git wipe
  wipe-all = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  wipe-modified = !git commit -aqm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

  # Deletes a tag locally and remotely.
  delete-tag = " \
    !f() {  \
      git push origin :refs/tags/$1; \
      git tag -d $1; \
    }; \
    f"

  # does a git difftool of a givem commit, or HEAD if none is specified
  showtool = "!showci () { \
                rev=${1:-HEAD}; \
                git difftool $rev~1 $rev; \
              }; \
              showci"
[submodule]
	recurse = true
