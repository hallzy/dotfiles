#!/bin/bash

getDate() {
    date '+%Y%m%d-%H%M%S'
}

getMonitorsList() {
    local monitorDimensions="$(xrandr | awk '$2 == "connected" { print $3 }')"

    # Separate into fields so I can easily sort.
    # We sort on column 4 first which is the y offset, and then 3 which is the x
    # offset. This results in an ordering of monitors that goes from left to right,
    # and then to the next row
    local monitors="$(echo "$monitorDimensions" | awk -F"[x+]" '{ print $1 " " $2 " " $3 " " $4 }' | sort -n -k4,4 -k3,3)"

    # Convert to array, splitting on newline
    SAVEIFS=$IFS
    IFS=$'\n'
    MONITORS=($monitors)
    IFS=$SAVEIFS

    NUMBER_OF_MONITORS="${#MONITORS[@]}"

    ## MONITORS is now a global list of your monitors formatted like this:
    ## {pixel width} {pixel height} {xOffset} {yOffset}
}

# Handler for all the monitor choices that a user could choose
handleMonitor() {
    local choice="$1"

    # Get the monitor number from choice
    local monNumber="$(echo "$choice" | grep -o "[1-9][0-9]*")"

    # Validate the monitor number
    if [ -z "$monNumber" ] || [ "$monNumber" -lt 1 ] || [ "$monNumber" -gt "$NUMBER_OF_MONITORS" ]; then
        err -e "Invalid monitor number '$monNumber'"
        exit 1
    fi

    local monIdx=$((monNumber-1))

    local monitor="${MONITORS[$monIdx]}"

    local width="$(echo "$monitor" | awk '{ print $1 }')"
    local height="$(echo "$monitor" | awk '{ print $2 }')"
    local xOffset="$(echo "$monitor" | awk '{ print $3 }')"
    local yOffset="$(echo "$monitor" | awk '{ print $4 }')"

    local geometry="${width}x${height}+${xOffset}+${yOffset}"

    local date="$(getDate)"

    if [ "$choice" = "Monitor ${monNumber}" ]; then
        maim -g "$geometry" "$SHOT_DIR/mon${monNumber}-$date.png"
    elif [ "$choice" = "Monitor ${monNumber} (copy only)" ]; then
        maim -g "$geometry" | xclip -selection clipboard -t image/png
    elif [ "$choice" = "Monitor ${monNumber} (screenshot plus copy)" ]; then
        maim -g "$geometry" | \
        tee "$SHOT_DIR/mon${monNumber}-${date}.png" | \
        xclip -selection clipboard -t image/png
    else
        err -e "Invalid Monitor Option '$choice'"
        exit 1
    fi
}

createOptionsArr() {
    options=(
        "Fullscreen"
        "Active window"
        "Selected region"
        "Fullscreen (copy only)"
        "Active window (copy only)"
        "Selected region (copy only)"
        "Fullscreen (screenshot plus copy)"
        "Active window (screenshot plus copy)"
        "Selected region (screenshot plus copy)"
    )

    # Create Monitor Options
    local num=0
    for monitor in "${MONITORS[@]}"; do
        ((num++))

        # Create each of these 3 monitor options for each attached monitor
        options+=("Monitor $num")
        options+=("Monitor $num (copy only)")
        options+=("Monitor $num (screenshot plus copy)")
    done

    # Finish the options list with the 'Quit' option
    options+=("Quit")
}

SHOT_DIR="$HOME/Pictures/Screenshots"
NUMBER_OF_MONITORS=0
MONITORS=()

if ! mkdir -p "$SHOT_DIR"; then
    err -e "Error creating screenshot dir '$SHOT_DIR'"
    exit 1
fi

getMonitorsList
if [ "$NUMBER_OF_MONITORS" -le 0 ]; then
    err -e "You have no monitors?"
    exit 1
fi

createOptionsArr

choice=$(printf '%s\n' "${options[@]}" | dmenu -i -l 20 -p 'Take screenshot of:')

case "$choice" in
    'Fullscreen')
        maim "$SHOT_DIR/full-$(getDate).png"
    ;;
    'Active window')
        maim -i "$(xdotool getactivewindow)" "$SHOT_DIR/window-$(getDate).png"
    ;;
    'Selected region')
        maim -s "$SHOT_DIR/region-$(getDate).png"
    ;;
    'Fullscreen (copy only)')
        maim | xclip -selection clipboard -t image/png
    ;;
    'Active window (copy only)')
        maim -i "$(xdotool getactivewindow)" | xclip -selection clipboard -t image/png
    ;;
    'Selected region (copy only)')
        maim -s | xclip -selection clipboard -t image/png
    ;;
    'Fullscreen (screenshot plus copy)')
        maim | \
        tee "$SHOT_DIR/full-$(getDate).png" | \
        xclip -selection clipboard -t image/png
    ;;
    'Active window (screenshot plus copy)')
        maim -i "$(xdotool getactivewindow)" | \
        tee "$SHOT_DIR/window-$(getDate).png" | \
        xclip -selection clipboard -t image/png
    ;;
    'Selected region (screenshot plus copy)')
        maim -s | \
        tee "$SHOT_DIR/region-$(getDate).png" | \
        xclip -selection clipboard -t image/png
    ;;
    Monitor*)
        handleMonitor "$choice"
    ;;
    'Quit')
        exit 0
    ;;
    *)
        err -e "Invalid choice '$choice'"
        exit 1
    ;;
esac
